[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name = "decommission-tool"
version = "0.1.0"
description = "Tool to decommission PostgreSQL databases from a Helm-based infrastructure"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core dependencies with version constraints
    "pyyaml>=6.0.1,<7.0.0",
    "requests>=2.31.0,<3.0.0",
    # MCP dependencies
    "mcp>=1.0.0,<2.0.0",
    "fastmcp>=0.1.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing with async support
    "pytest>=7.4.0,<9.0.0",
    "pytest-mock>=3.11.1,<4.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",  # ✅ Added for async tests
    
    # Performance enhancement
    "uvloop>=0.17.0,<1.0.0; python_version >= '3.11'",  # ✅ Added for async performance
    
    # Code quality
    "mypy>=1.5.0,<2.0.0",
    "black>=23.7.0,<25.0.0",
    "ruff>=0.1.0,<1.0.0",
    
    # Build tools
    "build>=0.10.0,<2.0.0",
    "twine>=4.0.0,<6.0.0",
]

[project.scripts]
decommission-tool = "decommission_tool:main"

[project.urls]
"Homepage" = "https://github.com/yourusername/decommission-tool"
"Bug Tracker" = "https://github.com/yourusername/decommission-tool/issues"
"Repository" = "https://github.com/yourusername/decommission-tool"

[tool.setuptools]
py-modules = ["decommission_tool", "git_utils", "file_system_mcp_server", "mcp_server_main"]

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", ".git*"]

# ✅ CRITICAL: pytest-asyncio configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"  # ✅ Enable automatic async test detection
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "asyncio: marks tests as asyncio tests",  # ✅ Add asyncio marker
]

# Code quality configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.pytest_cache
    | \.mypy_cache
    | build
    | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long - handled by black
    "B008",   # do not perform function calls in argument defaults
    "RUF012", # mutable class attributes should be annotated
]

[tool.ruff.isort]
known-first-party = ["decommission_tool", "git_utils", "file_system_mcp_server"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.coverage.run]
source = ["decommission_tool", "git_utils", "file_system_mcp_server"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
